(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,n(e,t,"get"))}function n(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}var r=new WeakMap,o=function(){function o(e,i,a){var u,c,s=this,l=i.data,f=i.handleCardClick,p=i.handleBinClick,h=i.handleLikeClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),function(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}(this,r,{writable:!0,value:void 0}),this._text=l.name,this._image=l.link,this._id=l.id,this._likes=l.likes,this._ownerID=l.ownerID,this._cardSelector=a,this._handleCardClick=f,c=e,function(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}(u=this,n(u,r,"set"),c),this._handleBinClick=p,this._handleLikeClick=h,this._likesUser=this._likes.some((function(e){return e._id===t(s,r)})),this._likeCounter=l.likeCounter}var i,a;return i=o,(a=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".photo").cloneNode(!0)}},{key:"getId",value:function(){return this._id}},{key:"isLiked",value:function(){return this._likesUser}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._photoImage=this._element.querySelector(".photo__image"),this._photoImage.src=this._image,this._photoImage.alt=this._text,this._element.querySelector(".photo__text").textContent=this._text,this._binElement=this._element.querySelector(".photo__bin"),this._ownerID===t(this,r)&&this._binElement.classList.add("photo__bin_active"),this._elementLikeButton=this._element.querySelector(".photo__vector"),this._elementLikeCounter=this._element.querySelector(".photo__numlike"),this._elementLikeCounter.textContent=this._likeCounter,this._setEventListeners(),this._element}},{key:"toggleLikesState",value:function(e){this._elementLikeCounter.textContent=e.likes.length,this._likesUser=!this._likesUser,this.isLiked()?this._elementLikeButton.classList.add("photo__vector_active"):this._elementLikeButton.classList.remove("photo__vector_active")}},{key:"handleDeleteBinClick",value:function(){this._element.remove(),this._element=null}},{key:"_setEventListeners",value:function(){var e=this;this._elementLikeButton.addEventListener("click",(function(){e._handleLikeClick()})),this._element.querySelector(".photo__bin").addEventListener("click",(function(){e._handleBinClick()})),this._photoImage.addEventListener("click",(function(){e._handleCardClick(e._text,e._image)}))}}])&&e(i.prototype,a),Object.defineProperty(i,"prototype",{writable:!1}),o}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formList=n,this._buttonElement=this._formList.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e){var t=this._formList.querySelector("#".concat(e.id,"-error"));e.classList.add(this._errorClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._formList.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._errorClass),t.classList.remove(this._inputErrorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"disableSubmitButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableSubmitButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableSubmitButton():this._enableSubmitButton()}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"enableValidation",value:function(){var e=this;this._inputList=Array.from(this._formList.querySelectorAll(this._inputSelector)),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("popup_active")}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("popup_active")}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target===e._popup||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=d(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},h.apply(this,arguments)}function d(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_(e)););return e}function y(e,t){return y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},y(e,t)}function m(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function _(e){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},_(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(r);if(o){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return m(this,e)});function a(e){var t,n=e.popupSelector,r=e.imagePhoto,o=e.imageText;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._imagePhoto=document.querySelector(r),t._imageText=document.querySelector(o),t}return t=a,(n=[{key:"open",value:function(e,t){this._imagePhoto.src=t,this._imagePhoto.alt=e,this._imageText.textContent=e,h(_(a.prototype),"open",this).call(this)}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function C(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupFormCard=n._popup.querySelector(".form"),n._handleFormSubmit=t,n._inputList=Array.from(n._popupFormCard.querySelectorAll(".form__item")),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;g(E(a.prototype),"setEventListeners",this).call(this),this._popupFormCard.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){g(E(a.prototype),"close",this).call(this),this._popupFormCard.reset()}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t){var n=t.username,r=t.job,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._username=document.querySelector(n),this._job=document.querySelector(r),this._avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{username:this._username.textContent,job:this._job.textContent}}},{key:"setUserInfo",value:function(e){var t=e.username,n=e.job,r=e.avatar;this._job.textContent=n,this._username.textContent=t,this._avatar.src=r}},{key:"getUserId",value:function(){return this._userID}},{key:"setUserId",value:function(e){this._userID=e}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_handlePromiseErr",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getUserInfoFromApi",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{method:"GET",headers:this._headers}).then((function(t){return e._handlePromiseErr(t)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{method:"GET",headers:this._headers}).then((function(t){return e._handlePromiseErr(t)}))}},{key:"addUserInfo",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handlePromiseErr(e)}))}},{key:"addNewCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handlePromiseErr(e)}))}},{key:"addUserAvatar",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handlePromiseErr(e)}))}},{key:"deleteNewCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/".concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._handlePromiseErr(e)}))}},{key:"putLikeCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/".concat(e,"/likes"),{method:"PUT",headers:this._headers}).then((function(e){return t._handlePromiseErr(e)}))}},{key:"deleteLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/".concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then((function(e){return t._handlePromiseErr(e)}))}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=q(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},U.apply(this,arguments)}function q(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=D(e)););return e}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function R(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function D(e){return D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},D(e)}var A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&x(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=D(r);if(o){var n=D(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._handleFormSubmit=r,t._formConfirm=t._popup.querySelector(".form-confirm"),t}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;U(D(a.prototype),"setEventListeners",this).call(this),this._formConfirm.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit()}))}},{key:"confirmDeleteMyCard",value:function(e){this._handleFormSubmit=e}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var N=document.querySelector(".popup-open"),V=document.querySelector(".form-profile"),M=document.querySelector(".form__item_type_name"),J=document.querySelector(".form__item_type_job"),z=document.querySelector(".popup-cards"),G=document.querySelector(".add-open"),H=z.querySelector(".form-card"),W=document.querySelector(".profile__edit-photo"),$=document.querySelector(".popup-avatar"),K={formSelector:".form",inputSelector:".form__item",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"form__item-error_active",errorClass:"form__item_type_error"},Q=new I({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41/",headers:{authorization:"cce2dc6d-fce0-4adb-80f6-8b8fce306754","content-type":"application/json"}}),X=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=document.querySelector(".".concat(e," .popup__save"));n.textContent=t?"Загрузка...":"Сохранить"},Y=new a(K,V),Z=new a(K,H),ee=new a(K,$);Y.enableValidation(),Z.enableValidation(),ee.enableValidation();var te=new v({popupSelector:".popup-image",imagePhoto:".popup__photo",imageText:".popup__text"}),ne=function(e,t){te.open(e,t)};te.setEventListeners();var re=new A({popupSelector:".confirm-popup"}),oe=function(e){var t=new o(ce.getUserId(),{data:e,handleCardClick:ne,handleBinClick:function(){re.open(),re.confirmDeleteMyCard((function(){Q.deleteNewCard(t.getId()).then((function(){t.handleDeleteBinClick(),re.close()})).catch((function(e){console.log(e)}))}))},handleLikeClick:function(){t.isLiked()?Q.deleteLike(t.getId()).then((function(e){t.toggleLikesState(e)})).catch((function(e){return console.log(e)})):Q.putLikeCard(t.getId()).then((function(e){t.toggleLikesState(e)})).catch((function(e){return console.log(e)}))}},".card-template");return t.generateCard()},ie=new c((function(e){var t=oe(e);ie.addItem(t)}),".cards__elements"),ae=Q.getInitialCards().then((function(e){return e.map((function(e){return{name:e.name,link:e.link,id:e._id,ownerID:e.owner._id,likes:e.likes,likeCounter:e.likes.length}}))})).catch((function(e){console.log(e)}));G.addEventListener("click",(function(){Z.disableSubmitButton(),ue.open()}));var ue=new j(".popup-cards",(function(e){var t=e.link,n=e.name;X("popup-cards",!0),Q.addNewCard({name:n,link:t}).then((function(e){ie.addItem(oe({link:e.link,name:e.name,id:e._id,ownerID:e.owner._id,likeCounter:e.likes.length,likes:e.likes})),ue.close()})).catch((function(e){console.log(e)})).finally((function(){X("popup-cards",!1)}))})),ce=new L({username:".profile__name",job:".profile__job",avatar:".profile__avatar"}),se=Q.getUserInfoFromApi().then((function(e){return e})).catch((function(e){return console.log(e)}));N.addEventListener("click",(function(){Y.disableSubmitButton();var e=ce.getUserInfo();M.value=e.username,J.value=e.job,le.open()}));var le=new j(".popup-form",(function(e){var t=e.username,n=e.job;X("popup-form",!0),Q.addUserInfo({name:t,about:n}).then((function(e){ce.setUserInfo({username:e.name,job:e.about,avatar:e.avatar}),le.close()})).catch((function(e){console.log(e)})).finally((function(){X("popup-form",!1)}))}));Promise.all([ae,se]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];ce.setUserId(i._id),ie.renderItems(o),ce.setUserInfo({username:i.name,job:i.about,avatar:i.avatar})})).catch((function(e){console.log(e)}));var fe=new j(".popup-avatar",(function(e){var t=e.avatar;X("popup-avatar",!0),Q.addUserAvatar({avatar:t}).then((function(e){ce.setUserInfo({username:e.name,job:e.about,avatar:e.avatar}),fe.close()})).catch((function(e){console.log(e)})).finally((function(){X("popup-avatar",!1)}))}));W.addEventListener("click",(function(){ee.disableSubmitButton(),fe.open()})),re.setEventListeners(),le.setEventListeners(),ue.setEventListeners(),fe.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,