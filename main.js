(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._text=e.cardname,this._image=e.link,this._cardSelector=n,this._handleCardClick=r}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".photo").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._photoImage=this._element.querySelector(".photo__image"),this._setEventListeners(),this._photoImage.src=this._image,this._photoImage.alt=this._text,this._element.querySelector(".photo__text").textContent=this._text,this._element}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".photo__vector").addEventListener("click",(function(t){e._handleLikeClick(t)})),this._element.querySelector(".photo__bin").addEventListener("click",(function(t){e._handleBinClick(t)})),this._photoImage.addEventListener("click",(function(){e._handleCardClick(e._text,e._image)}))}},{key:"_handleLikeClick",value:function(e){e.target.classList.toggle("photo__vector_active")}},{key:"_handleBinClick",value:function(){this._element.remove()}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formList=n,this._buttonElement=this._formList.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e){var t=this._formList.querySelector("#".concat(e.id,"-error"));e.classList.add(this._errorClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._formList.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._errorClass),t.classList.remove(this._inputErrorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"disableSubmitButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableSubmitButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableSubmitButton():this._enableSubmitButton()}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"enableValidation",value:function(){var e=this;this._inputList=Array.from(this._formList.querySelectorAll(this._inputSelector)),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}(),o=[{cardname:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{cardname:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{cardname:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{cardname:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{cardname:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{cardname:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}];function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.data,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;o.forEach((function(t){e._renderer(t)}))}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("popup_active")}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("popup_active")}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target===e._popup||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=f(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(this,arguments)}function f(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function d(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function a(e){var t,n=e.popupSelector,r=e.imagePhoto,o=e.imageText;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._imagePhoto=document.querySelector(r),t._imageText=document.querySelector(o),t}return t=a,(n=[{key:"open",value:function(e,t){this._imagePhoto.src=t,this._imagePhoto.alt=e,this._imageText.textContent=e,p(y(a.prototype),"open",this).call(this)}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}function k(e,t){return k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},k(e,t)}function w(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function a(e,t){var n,r=t.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupFormCard=n._popup.querySelector(".form"),n._handleFormSubmit=r,n._inputList=Array.from(n._popupFormCard.querySelectorAll(".form__item")),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;b(S(a.prototype),"setEventListeners",this).call(this),this._popupFormCard.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){b(S(a.prototype),"close",this).call(this),this._popupFormCard.reset()}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t,n){var r=t.username,o=t.job,i=t.avatar,a=t.id;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._username=document.querySelector(r),this._job=document.querySelector(o),this._avatar=document.querySelector(i),this._idUser=a,this._api=n}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{username:this._username.textContent,job:this._job.textContent,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(e,t){this._job.textContent=t,this._username.textContent=e}},{key:"setUserAvatar",value:function(e){this._avatar.src=e}},{key:"setUserDataInfo",value:function(e){this._job.textContent=e.about,this._username.textContent=e.name,this._avatar.src=e.avatar,this._idUser=e.id}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return fetch(this._url+"/users/me",{method:"GET",headers:this._headers})}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),P=document.querySelector(".popup-open"),x=document.querySelector(".form"),I=document.querySelector(".form__item_type_name"),q=document.querySelector(".form__item_type_job"),B=document.querySelector(".popup-cards"),T=document.querySelector(".add-open"),R=B.querySelector(".form-card"),U={formSelector:".form",inputSelector:".form__item",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"form__item-error_active",errorClass:"form__item_type_error"},F=new L({baseUrl:"https://nomoreparties.co/v1/cohort-41",headers:{authorization:"cce2dc6d-fce0-4adb-80f6-8b8fce306754","content-type":"application/json"}});F.getUserInfo();var V=new r(U,x),D=new r(U,R);V.enableValidation(),D.enableValidation();var A=new _({popupSelector:".popup-image",imagePhoto:".popup__photo",imageText:".popup__text"}),z=function(e,t){A.open(e,t)};A.setEventListeners();var G=function(e){return new t(e,".card-template",z).generateCard()},M=new a({data:o,renderer:function(e){var t=G(e);M.addItem(t)}},".cards__elements");M.renderItems();var N=new j(".popup-cards",{handleFormSubmit:function(e){M.addItem(G(e)),N.close()}}),H=new C({username:".profile__name",job:".profile__job",avatar:".profile__avatar",id:{}},F),J=new j(".popup-form",{handleFormSubmit:function(e){H.setUserInfo(e),J.close()}});J.setEventListeners(),N.setEventListeners(),P.addEventListener("click",(function(){V.disableSubmitButton();var e=H.getUserInfo();I.value=e.username,q.value=e.job,J.open()})),T.addEventListener("click",(function(){D.disableSubmitButton(),N.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUJBQ1ZDLElBQUssZ0JBQ0xDLE9BQVEsbUJBQ1IzRCxHQU5hLElBT1p3RCxHQUVHMkMsRUFBbUIsSUFBSXZELEVBQWMsY0FBZSxDQUN4REMsaUJBQWtCLFNBQUNHLEdBQ2pCa0QsRUFBU0UsWUFBWXBELEdBQ3JCbUQsRUFBaUJsRSxXQUlyQmtFLEVBQWlCUixvQkFDakJNLEVBQWNOLG9CQUdkaEIsRUFBa0JyRyxpQkFBaUIsU0FBUyxXQUUxQ2dILEVBQWE3RSxzQkFFYixJQUFNNEYsRUFBbUJILEVBQVNiLGNBQ2xDUixFQUFVMUIsTUFBUWtELEVBQWlCNUMsU0FFbkNxQixFQUFTM0IsTUFBUWtELEVBQWlCM0MsSUFDbEN5QyxFQUFpQlQsVUFJbkJWLEVBQWUxRyxpQkFBaUIsU0FBUyxXQUN2Q2lILEVBQWE5RSxzQkFDYndGLEVBQWNQLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvcGFnZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g0LrQu9Cw0YHRgSDRgdC+0LfQtNCw0L3QuNGPINC60LDRgNGC0L7Rh9C60LhcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgLy/QtNCw0L3QvdGL0LUg0LrQsNGA0YLQvtGH0LrQuCDQuCB0ZW1wbGF0ZVxyXG4gIGNvbnN0cnVjdG9yKGRhdGEsIGNhcmRTZWxlY3RvciwgaGFuZGxlQ2FyZENsaWNrKSB7XHJcbiAgICB0aGlzLl90ZXh0ID0gZGF0YS5jYXJkbmFtZTtcclxuICAgIHRoaXMuX2ltYWdlID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgY29uc3QgcGhvdG9DYXJkID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIHBob3RvQ2FyZDtcclxuICB9XHJcbiAgLy/Qv9GA0LjRgdCy0LDQtdCy0LDQtdC8INC60LvQsNGB0YHRiyDQt9C90LDRh9C10L3QuNGP0Lwg0LrQsNGA0YLQvtGH0LXQulxyXG4gIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgLy8g0JTQvtCx0L7QstC70Y/QtdC8INC00LDQvdC90YvQtVxyXG4gICAgdGhpcy5fcGhvdG9JbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5waG90b19faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fcGhvdG9JbWFnZS5zcmMgPSB0aGlzLl9pbWFnZTtcclxuICAgIHRoaXMuX3Bob3RvSW1hZ2UuYWx0ID0gdGhpcy5fdGV4dDtcclxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5waG90b19fdGV4dFwiKS50ZXh0Q29udGVudCA9IHRoaXMuX3RleHQ7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLyBsaWtlXHJcbiAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvX192ZWN0b3JcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKGV2dCk7XHJcbiAgICAgIH0pO1xyXG4gICAgLy8gYmluXHJcbiAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvX19iaW5cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQmluQ2xpY2soZXZ0KTtcclxuICAgICAgfSk7XHJcbiAgICAvLyDQvtGC0LrRgNGL0YLQuNC1INC60LDRgNGC0LjQvdC60LhcclxuICAgIHRoaXMuX3Bob3RvSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX3RleHQsIHRoaXMuX2ltYWdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvLyBsaWtlXHJcbiAgX2hhbmRsZUxpa2VDbGljayhldnQpIHtcclxuICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShcInBob3RvX192ZWN0b3JfYWN0aXZlXCIpO1xyXG4gIH1cclxuICAvL2JpblxyXG4gIF9oYW5kbGVCaW5DbGljaygpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgfVxyXG59XHJcbiIsIlxyXG5leHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSwgZm9ybUxpc3QpIHtcclxuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IGRhdGEuZm9ybVNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGRhdGEuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gZGF0YS5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBkYXRhLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBkYXRhLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBkYXRhLmVycm9yQ2xhc3M7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICB0aGlzLl9mb3JtTGlzdCA9IGZvcm1MaXN0O1xyXG4gICAgLy9jb25zb2xlLmxvZyAoZm9ybUxpc3QpXHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUxpc3QucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICAvL9C/0L7QutCw0LfRi9Cy0LDQtdGCINGN0LvQtdC80LXQvdGCINC+0YjQuNCx0LrQuFxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1MaXN0LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGVycm9yRWxlbWVudClcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIC8vINGB0LrRgNGL0LLQsNC10YIg0Y3Qu9C10LzQtdC90YIg0L7RiNC40LHQutC4XHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUxpc3QucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgLy9jb25zb2xlLmxvZyhlcnJvckVsZW1lbnQpO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICB9XHJcblxyXG4gIC8vINC/0YDQvtCy0LXRgNC60LAg0LjQvdC/0YPRgtC+0LIg0LTQu9GPINC60L3QvtC/0LrQuFxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICByZXR1cm4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8g0YTRg9C90LrRhtC40Y8g0LHQu9C+0LrQuNGA0L7QstC60Lgg0LrQvdC+0L/QutC4XHJcbiAgZGlzYWJsZVN1Ym1pdEJ1dHRvbigpIHtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuXHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIC8vY29uc29sZS5sb2codGhpcy5fYnV0dG9uRWxlbWVudClcclxuICB9XHJcblxyXG4gIF9lbmFibGVTdWJtaXRCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyDRhNGD0L3QutGG0LjRjyDQv9C10YDQtdC60LvRjtGH0LXQvdC40Y8g0LrQvdC+0L/QutC4XHJcblxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIC8vINCV0YHQu9C4INC10YHRgtGMINGF0L7RgtGPINCx0Ysg0L7QtNC40L0g0L3QtdCy0LDQu9C40LTQvdGL0Lkg0LjQvdC/0YPRglxyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgIC8vINGB0LTQtdC70LDQuSDQutC90L7Qv9C60YMg0L3QtdCw0LrRgtC40LLQvdC+0LlcclxuICAgICAgdGhpcy5kaXNhYmxlU3VibWl0QnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDQuNC90LDRh9C1INGB0LTQtdC70LDQuSDQutC90L7Qv9C60YMg0LDQutGC0LjQstC90L7QuVxyXG4gICAgICB0aGlzLl9lbmFibGVTdWJtaXRCdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vINC/0YDQvtCy0LXRgNC60LAg0L3QsCDQstCw0LvQuNC00L3QvtGB0YLRjCDQv9C+0LvQtdC5XHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIC8vY29uc29sZS5sb2coaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKVxyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vINGE0YPQvdC60YbQuNGPINC/0LXRgNC10LHQvtGA0LAg0LLRgdC10YUgaW5wdXRzINGE0L7RgNC8XHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1MaXN0LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcilcclxuICAgICk7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2lucHV0TGlzdClcclxuXHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgeyBpbml0aWFsQ2FyZHMgYXMgaXRlbXMgfTtcclxuY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIGNhcmRuYW1lOiBcItCQ0YDRhdGL0LdcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2Fya2h5ei5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIGNhcmRuYW1lOiBcItCn0LXQu9GP0LHQuNC90YHQutCw0Y8g0L7QsdC70LDRgdGC0YxcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2NoZWx5YWJpbnNrLW9ibGFzdC5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIGNhcmRuYW1lOiBcItCY0LLQsNC90L7QstC+XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9pdmFub3ZvLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY2FyZG5hbWU6IFwi0JrQsNC80YfQsNGC0LrQsFwiLFxyXG4gICAgbGluazogXCJodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQva2FtY2hhdGthLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY2FyZG5hbWU6IFwi0KXQvtC70LzQvtCz0L7RgNGB0LrQuNC5INGA0LDQudC+0L1cIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2tob2xtb2dvcnNreS1yYXlvbi5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIGNhcmRuYW1lOiBcItCR0LDQudC60LDQu1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQvYmFpa2FsLmpwZ1wiLFxyXG4gIH0sXHJcbl07XHJcbiIsImltcG9ydCB7IGl0ZW1zIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGRhdGEsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJJdGVtcyA9IGRhdGE7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICAvL2NvbnNvbGUubG9nKGRhdGEpXHJcbiAgfVxyXG5cclxuICAvLyDQtNC+0LHQsNCy0LvQtdC90L3QsNGPINC60LDRgNGC0L7Rh9C60LAg0L7RgtGA0LjRgdC+0LLRi9Cy0LDQtdGC0YHRjyDQsiDQvdCw0YfQsNC70LVcclxuICBhZGRJdGVtKGNhcmRFbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChjYXJkRWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICAvLyDRgdC+0LfQtNCw0L3QuNC1INC60LDRgNGC0L7Rh9C60Lgg0Lgg0LXRkSDRgNC10L3QtNC10YBcclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIC8v0YTRg9C90LrRhtC40Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L8t0LDQv9C+0LJcclxuICBvcGVuKCkge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwX2FjdGl2ZVwiKTsgLy/RhNGD0L3QutGG0LjRjyDQtNC70Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L8t0LDQv9CwXHJcbiAgfVxyXG4gIC8v0YTRg9C90LrRhtC40Y8g0LfQsNC60YDRi9GC0LjRjyDQv9C+0L8t0LDQv9C+0LJcclxuICBjbG9zZSgpIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9hY3RpdmVcIik7IC8v0YTRg9C90LrRhtC40Y8g0LTQu9GPINC30LDQutGA0YvRgtC40Y9cclxuICB9XHJcblxyXG4gIC8v0LfQsNC60YDRi9GC0LjQtSDQv9C+0L8t0LDQv9CwINC90LAgZXNjdXBcclxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XHJcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy/RgdC70YPRiNCw0YLQtdC70Ywg0LTQu9GPINC30LDQutGA0YvRgtC40Y8g0L/QvtC/LdCw0L/QsCDQvdCwIG92ZXJsYXkg0Lgg0LrRgNC10YHRgtC40LpcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChldmVudCkgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9wb3B1cCB8fFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cF9fY2xvc2VcIilcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcbi8v0L/QvtC/LdC/0LDQvyDRgSDQutCw0YDRgtC40L3QutC+0LlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBpbWFnZVBob3RvLCBpbWFnZVRleHQgfSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbWFnZVBob3RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpbWFnZVBob3RvKTtcclxuICAgIHRoaXMuX2ltYWdlVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaW1hZ2VUZXh0KTtcclxuICB9XHJcbiAgLy8g0L7RgtC60YDRi9GC0LjQtSDQv9C+0L8t0LDQv9CwXHJcbiAgb3BlbihjYXJkbmFtZSwgbGluaykge1xyXG4gICAgdGhpcy5faW1hZ2VQaG90by5zcmMgPSBsaW5rO1xyXG4gICAgdGhpcy5faW1hZ2VQaG90by5hbHQgPSBjYXJkbmFtZTtcclxuICAgIHRoaXMuX2ltYWdlVGV4dC50ZXh0Q29udGVudCA9IGNhcmRuYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgeyBoYW5kbGVGb3JtU3VibWl0IH0pIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtQ2FyZCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybVwiKTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgIHRoaXMuX3BvcHVwRm9ybUNhcmQucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtX19pdGVtXCIpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1DYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtQ2FyZC5yZXNldCgpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyB1c2VybmFtZSwgam9iLCBhdmF0YXIsIGlkfSwgYXBpKSB7XHJcbiAgICB0aGlzLl91c2VybmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlcm5hbWUpO1xyXG4gICAgdGhpcy5fam9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2IpO1xyXG4gICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXIpO1xyXG4gICAgdGhpcy5faWRVc2VyID0gaWQ7XHJcbiAgICB0aGlzLl9hcGkgPSBhcGk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIGNvbnN0IGlucHV0VXNlckluZm8gPSB7XHJcbiAgICAgIHVzZXJuYW1lOiB0aGlzLl91c2VybmFtZS50ZXh0Q29udGVudCxcclxuICAgICAgam9iOiB0aGlzLl9qb2IudGV4dENvbnRlbnQsXHJcbiAgICAgIGF2YXRhcjogdGhpcy5fYXZhdGFyLnNyY1xyXG4gICAgfTtcclxuICAgIHJldHVybiBpbnB1dFVzZXJJbmZvO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8odXNlcm5hbWUsIGpvYikge1xyXG4gICAgXHJcbiAgICB0aGlzLl9qb2IudGV4dENvbnRlbnQgPSBqb2IsXHJcbiAgICB0aGlzLl91c2VybmFtZS50ZXh0Q29udGVudCA9IHVzZXJuYW1lO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckF2YXRhcihhdmF0YXIpIHtcclxuICAgIHRoaXMuX2F2YXRhci5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyRGF0YUluZm8oZGF0YSkge1xyXG4gICAgdGhpcy5fam9iLnRleHRDb250ZW50ID0gZGF0YS5hYm91dCxcclxuICAgIHRoaXMuX3VzZXJuYW1lLnRleHRDb250ZW50ID0gZGF0YS5uYW1lLFxyXG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IGRhdGEuYXZhdGFyO1xyXG4gICAgdGhpcy5faWRVc2VyID0gZGF0YS5pZDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG50aGlzLl9iYXNlVXJsID0gY29uZmlnLnVybDtcclxudGhpcy5faGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaCh0aGlzLl91cmwgKyAnL3VzZXJzL21lJywge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7IGl0ZW1zIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiXHJcblxyXG5jb25zdCBwcm9maWxlT3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAtb3BlblwiKTsgLy/QutC90L7Qv9C60LAg0L7RgtC60YDRi9GC0LjRjyDQv9C+0L8t0LDQv9CwXHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpOyAvL9CS0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0LzQtdGC0L7QtNC+0LwgcXVlcnlTZWxlY3RvcigpXHJcbi8vINCd0LDRhdC+0LTQuNC8INC/0L7Qu9GPINGE0L7RgNC80Ysg0LIgRE9NXHJcbmNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9faXRlbV90eXBlX25hbWVcIik7IC8vINCS0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0LjQvdGB0YLRgNGD0LzQtdC90YLQvtC8IC5xdWVyeVNlbGVjdG9yKClcclxuY29uc3Qgam9iSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX2l0ZW1fdHlwZV9qb2JcIik7IC8vINCS0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0LjQvdGB0YLRgNGD0LzQtdC90YLQvtC8IC5xdWVyeVNlbGVjdG9yKClcclxuXHJcbmNvbnN0IGNhcmRzUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLWNhcmRzXCIpOyAvL9C/0L7Qvy3Qv9Cw0L8g0YTQvtGA0LzRiyDRgSDQutCw0YDRgtC40L3QutCw0LzQuFxyXG5jb25zdCBjYXJkT3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLW9wZW5cIik7IC8v0LrQvdC+0L/QutCwINC+0YLQutGA0YvRgtC40Y8g0YTQvtGA0LzRiyDQv9C+0L8t0LDQv9CwINGBINC60LDRgNGC0LjQvdC60LDQvNC4XHJcblxyXG4vL2NvbnN0IGNhcmRzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudHNcIik7IC8vINGB0L/QuNGB0L7QuiDQutC+0L3RgtC10LnQvdC10YBcclxuY29uc3QgZm9ybUNhcmQgPSBjYXJkc1BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS1jYXJkXCIpOyAvL9C00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC60LDRgNGC0L7Rh9C60Lgg0LrQsNGA0YLQuNC90LrQuFxyXG5cclxuY29uc3Qgb2JqID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIuZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLmZvcm1fX2l0ZW1cIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX3NhdmVcIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19zYXZlX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcImZvcm1fX2l0ZW0tZXJyb3JfYWN0aXZlXCIsXHJcbiAgZXJyb3JDbGFzczogXCJmb3JtX19pdGVtX3R5cGVfZXJyb3JcIixcclxufTtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkgKHtiYXNlVXJsOiAnaHR0cHM6Ly9ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC00MScsXHJcbiAgaGVhZGVyczogeyBcclxuICAgIGF1dGhvcml6YXRpb246ICdjY2UyZGM2ZC1mY2UwLTRhZGItODBmNi04YjhmY2UzMDY3NTQnLFxyXG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICB9XHJcbn0pO1xyXG5cclxuYXBpLmdldFVzZXJJbmZvKClcclxuXHJcbi8v0LLQsNC70LjQtNCw0YbQuNGPINGE0L7RgNC8XHJcbmNvbnN0IHZhbGlkaXR5Rm9ybSA9IG5ldyBGb3JtVmFsaWRhdG9yKG9iaiwgcHJvZmlsZUZvcm0pO1xyXG5jb25zdCB2YWxpZGl0eUNhcmQgPSBuZXcgRm9ybVZhbGlkYXRvcihvYmosIGZvcm1DYXJkKTtcclxuXHJcbnZhbGlkaXR5Rm9ybS5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbnZhbGlkaXR5Q2FyZC5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vL9C/0L7Qvy3Qv9Cw0L8g0YEg0LrQsNGA0YLQuNC90LrQvtC5LCDQv9GA0LjRgdCy0L7QtdC90LjQtSDQt9C90LDRh9C10L3QuNC5ICjRjdGC0L4g0L3QtSDQstC+0LvRiNC10LHRgdGC0LLQvilcclxuY29uc3QgcG9wdXBXaXRoT3BlbkltYWdlID0gbmV3IFBvcHVwV2l0aEltYWdlKHtcclxuICBwb3B1cFNlbGVjdG9yOiBcIi5wb3B1cC1pbWFnZVwiLFxyXG4gIGltYWdlUGhvdG86IFwiLnBvcHVwX19waG90b1wiLFxyXG4gIGltYWdlVGV4dDogXCIucG9wdXBfX3RleHRcIixcclxufSk7XHJcbi8vINGE0YPQvdC60YbQuNGPINC00LvRjyDQvtGC0LrRgNGL0YLQuNGPINC/0L7Qvy3Qv9Cw0L/QsCDQutCw0YDRgtC40L3QutC4XHJcbmNvbnN0IGhhbmRsZUNhcmRDbGljayA9IChjYXJkbmFtZSwgbGluaykgPT4ge1xyXG4gIHBvcHVwV2l0aE9wZW5JbWFnZS5vcGVuKGNhcmRuYW1lLCBsaW5rKTtcclxufTtcclxucG9wdXBXaXRoT3BlbkltYWdlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL9GB0L7Qt9C00LDQvdC40LUg0LrQsNGA0YLQvtGH0LrQuCDQuCDRgtC10LzQv9C70LXQudGC0LAg0Lgg0YTRg9C90LrRhtC40Y8g0L7RgtC60YDRi9GC0LjRjyDQutCw0YDRgtC40L3QutC4XHJcbmNvbnN0IGNyZWF0ZUNhcmQgPSAoZGF0YSkgPT4ge1xyXG4gIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChkYXRhLCBcIi5jYXJkLXRlbXBsYXRlXCIsIGhhbmRsZUNhcmRDbGljayk7XHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xyXG4gIHJldHVybiBjYXJkRWxlbWVudDtcclxufTtcclxuLy8g0LzQsNGB0YHQuNCyINGBINC60LDRgNGC0L7Rh9C60LDQvNC4INCy0YHRgtCw0LLQu9GP0LXQvCDQsiDQv9GA0L7QtdC60YJcclxuY29uc3QgcmVuZGVyQ2FyZCA9IG5ldyBTZWN0aW9uKFxyXG4gIHtcclxuICAgIGRhdGE6IGl0ZW1zLFxyXG4gICAgcmVuZGVyZXI6IChkYXRhKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChkYXRhKTtcclxuICAgICAgcmVuZGVyQ2FyZC5hZGRJdGVtKGNhcmRFbGVtZW50KTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBcIi5jYXJkc19fZWxlbWVudHNcIlxyXG4pO1xyXG5cclxucmVuZGVyQ2FyZC5yZW5kZXJJdGVtcygpO1xyXG5cclxuLy8g0L/QvtC/LdC/0LDQvyDRgSDQutCw0YDRgtC40L3QutC+0LlcclxuY29uc3QgcG9wdXBXaXRoQ2FyZCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiLnBvcHVwLWNhcmRzXCIsIHtcclxuICBoYW5kbGVGb3JtU3VibWl0OiAoZGF0YSkgPT4ge1xyXG4gICAgcmVuZGVyQ2FyZC5hZGRJdGVtKGNyZWF0ZUNhcmQoZGF0YSkpO1xyXG4gICAgcG9wdXBXaXRoQ2FyZC5jbG9zZSgpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuY29uc3QgaWRVc2VyID0ge31cclxuLy8g0L/QvtC/LdC/0LDQvyDQv9GA0L7RhNC40LvRjFxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgdXNlcm5hbWU6IFwiLnByb2ZpbGVfX25hbWVcIixcclxuICBqb2I6IFwiLnByb2ZpbGVfX2pvYlwiLFxyXG4gIGF2YXRhcjogXCIucHJvZmlsZV9fYXZhdGFyXCIsXHJcbiAgaWQ6IGlkVXNlclxyXG59LCBhcGkpO1xyXG5cclxuY29uc3QgcG9wdXBXaXRoUHJvZmlsZSA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiLnBvcHVwLWZvcm1cIiwge1xyXG4gIGhhbmRsZUZvcm1TdWJtaXQ6IChpbnB1dFZhbHVlcykgPT4ge1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oaW5wdXRWYWx1ZXMpO1xyXG4gICAgcG9wdXBXaXRoUHJvZmlsZS5jbG9zZSgpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxucG9wdXBXaXRoUHJvZmlsZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5wb3B1cFdpdGhDYXJkLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL9Ch0L7RhdGA0LDQvdC10L3QuNC1INC00LDQvdC90YvRhSDQtNC70Y8g0L/QvtC/LdCw0L/QsCDRhNC+0YDQvNGLINC/0YDQvtGE0LjQu9GMXHJcbnByb2ZpbGVPcGVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgLy9cclxuICB2YWxpZGl0eUZvcm0uZGlzYWJsZVN1Ym1pdEJ1dHRvbigpO1xyXG5cclxuICBjb25zdCBwcm9maWxlVXNlclBvcHVwID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBuYW1lSW5wdXQudmFsdWUgPSBwcm9maWxlVXNlclBvcHVwLnVzZXJuYW1lOyAvL9C30LDQv9C40YHRi9Cy0LDQtdC8INC00LDQvdC90YvQtSDQsiDQuNC90L/Rg9GCINC40Lcg0L/RgNC+0YTQsNC50LvQsFxyXG5cclxuICBqb2JJbnB1dC52YWx1ZSA9IHByb2ZpbGVVc2VyUG9wdXAuam9iO1xyXG4gIHBvcHVwV2l0aFByb2ZpbGUub3BlbigpO1xyXG59KTtcclxuXHJcbi8vINC+0YLQutGA0YvRgtC40LUg0L/QvtC/LdCw0L/QsCDQtNC+0LHQvtCy0LvQtdC90LjRjyDQutCw0YDRgtC40L3QutC4XHJcbmNhcmRPcGVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgdmFsaWRpdHlDYXJkLmRpc2FibGVTdWJtaXRCdXR0b24oKTtcclxuICBwb3B1cFdpdGhDYXJkLm9wZW4oKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJDYXJkIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsInRoaXMiLCJfdGV4dCIsImNhcmRuYW1lIiwiX2ltYWdlIiwibGluayIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlQ2FyZENsaWNrIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9lbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiX3Bob3RvSW1hZ2UiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJfaGFuZGxlTGlrZUNsaWNrIiwiX2hhbmRsZUJpbkNsaWNrIiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicmVtb3ZlIiwiRm9ybVZhbGlkYXRvciIsImZvcm1MaXN0IiwiX2Zvcm1TZWxlY3RvciIsImZvcm1TZWxlY3RvciIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtTGlzdCIsIl9idXR0b25FbGVtZW50IiwiaW5wdXRFbGVtZW50IiwiZXJyb3JFbGVtZW50IiwiaWQiLCJhZGQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9pbnB1dExpc3QiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsImRpc2FibGVkIiwiX2hhc0ludmFsaWRJbnB1dCIsImRpc2FibGVTdWJtaXRCdXR0b24iLCJfZW5hYmxlU3VibWl0QnV0dG9uIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImZvckVhY2giLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiaW5pdGlhbENhcmRzIiwiU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwicmVuZGVyZXIiLCJfcmVuZGVySXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiY2FyZEVsZW1lbnQiLCJwcmVwZW5kIiwiaXRlbXMiLCJpdGVtIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwia2V5IiwiY2xvc2UiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjb250YWlucyIsIlBvcHVwV2l0aEltYWdlIiwiaW1hZ2VQaG90byIsImltYWdlVGV4dCIsIl9pbWFnZVBob3RvIiwiX2ltYWdlVGV4dCIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0IiwiX3BvcHVwRm9ybUNhcmQiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsImlucHV0VmFsdWVzIiwiaW5wdXQiLCJuYW1lIiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsIl9nZXRJbnB1dFZhbHVlcyIsInJlc2V0IiwiVXNlckluZm8iLCJhcGkiLCJ1c2VybmFtZSIsImpvYiIsImF2YXRhciIsIl91c2VybmFtZSIsIl9qb2IiLCJfYXZhdGFyIiwiX2lkVXNlciIsIl9hcGkiLCJhYm91dCIsIkFwaSIsImNvbmZpZyIsIl9iYXNlVXJsIiwidXJsIiwiX2hlYWRlcnMiLCJoZWFkZXJzIiwiZmV0Y2giLCJfdXJsIiwibWV0aG9kIiwicHJvZmlsZU9wZW5CdXR0b24iLCJwcm9maWxlRm9ybSIsIm5hbWVJbnB1dCIsImpvYklucHV0IiwiY2FyZHNQb3B1cCIsImNhcmRPcGVuQnV0dG9uIiwiZm9ybUNhcmQiLCJvYmoiLCJiYXNlVXJsIiwiYXV0aG9yaXphdGlvbiIsImdldFVzZXJJbmZvIiwidmFsaWRpdHlGb3JtIiwidmFsaWRpdHlDYXJkIiwiZW5hYmxlVmFsaWRhdGlvbiIsInBvcHVwV2l0aE9wZW5JbWFnZSIsIm9wZW4iLCJzZXRFdmVudExpc3RlbmVycyIsImNyZWF0ZUNhcmQiLCJnZW5lcmF0ZUNhcmQiLCJyZW5kZXJDYXJkIiwiYWRkSXRlbSIsInJlbmRlckl0ZW1zIiwicG9wdXBXaXRoQ2FyZCIsInVzZXJJbmZvIiwicG9wdXBXaXRoUHJvZmlsZSIsInNldFVzZXJJbmZvIiwicHJvZmlsZVVzZXJQb3B1cCJdLCJzb3VyY2VSb290IjoiIn0=