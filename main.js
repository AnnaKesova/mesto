(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._text=e.cardname,this._image=e.link,this._cardSelector=n,this._handleCardClick=r}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".photo").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._photoImage=this._element.querySelector(".photo__image"),this._setEventListeners(),this._photoImage.src=this._image,this._photoImage.alt=this._text,this._element.querySelector(".photo__text").textContent=this._text,this._element}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".photo__vector").addEventListener("click",(function(t){e._handleLikeClick(t)})),this._element.querySelector(".photo__bin").addEventListener("click",(function(t){e._handleBinClick(t)})),this._photoImage.addEventListener("click",(function(){e._handleCardClick(e._text,e._image)}))}},{key:"_handleLikeClick",value:function(e){e.target.classList.toggle("photo__vector_active")}},{key:"_handleBinClick",value:function(){this._element.remove()}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formList=n,this._buttonElement=this._formList.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e){var t=this._formList.querySelector("#".concat(e.id,"-error"));e.classList.add(this._errorClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._formList.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._errorClass),t.classList.remove(this._inputErrorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"disableSubmitButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableSubmitButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableSubmitButton():this._enableSubmitButton()}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"enableValidation",value:function(){var e=this;this._inputList=Array.from(this._formList.querySelectorAll(this._inputSelector)),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}(),o=[{cardname:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{cardname:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{cardname:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{cardname:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{cardname:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{cardname:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}];function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.data,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;o.forEach((function(t){e._renderer(t)}))}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("popup_active")}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("popup_active")}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target===e._popup||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=f(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(this,arguments)}function f(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function d(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function a(e){var t,n=e.popupSelector,r=e.imagePhoto,o=e.imageText;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._imagePhoto=document.querySelector(r),t._imageText=document.querySelector(o),t}return t=a,(n=[{key:"open",value:function(e,t){this._imagePhoto.src=t,this._imagePhoto.alt=e,this._imageText.textContent=e,p(y(a.prototype),"open",this).call(this)}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function k(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(e,t){var n,r=t.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupFormCard=n._popup.querySelector(".form"),n._handleFormSubmit=r,n._inputList=Array.from(n._popupFormCard.querySelectorAll(".form__item")),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;b(w(a.prototype),"setEventListeners",this).call(this),this._popupFormCard.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){b(w(a.prototype),"close",this).call(this),this._popupFormCard.reset()}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){var n=t.username,r=t.job,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._username=document.querySelector(n),this._job=document.querySelector(r),this._avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{username:this._username.textContent,job:this._job.textContent,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(e){this._job.textContent=e.job,this._username.textContent=e.username,this._avatar.src=e.avatar}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),O=document.querySelector(".popup-open"),L=document.querySelector(".form"),P=document.querySelector(".form__item_type_name"),x=document.querySelector(".form__item_type_job"),q=document.querySelector(".popup-cards"),I=document.querySelector(".add-open"),B=q.querySelector(".form-card"),R={formSelector:".form",inputSelector:".form__item",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"form__item-error_active",errorClass:"form__item_type_error"};fetch("https://mesto.nomoreparties.co/v1/cohort-41/users/me",{headers:{authorization:"cce2dc6d-fce0-4adb-80f6-8b8fce306754"}}).then((function(e){return e.json()})).then((function(e){var t=JSON.stringify(e);console.log(t.name)}));var T=new r(R,L),F=new r(R,B);T.enableValidation(),F.enableValidation();var V=new m({popupSelector:".popup-image",imagePhoto:".popup__photo",imageText:".popup__text"}),D=function(e,t){V.open(e,t)};V.setEventListeners();var A=function(e){return new t(e,".card-template",D).generateCard()},U=new a({data:o,renderer:function(e){var t=A(e);U.addItem(t)}},".cards__elements");U.renderItems();var z=new j(".popup-cards",{handleFormSubmit:function(e){U.addItem(A(e)),z.close()}}),N=new C({username:".profile__name",job:".profile__job",avatar:".profile__avatar"}),J=new j(".popup-form",{handleFormSubmit:function(e){N.setUserInfo(e),J.close()}});J.setEventListeners(),z.setEventListeners(),O.addEventListener("click",(function(){T.disableSubmitButton();var e=N.getUserInfo();P.value=e.username,x.value=e.job,J.open()})),I.addEventListener("click",(function(){F.disableSubmitButton(),z.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBY1AsVyIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyDQutC70LDRgdGBINGB0L7Qt9C00LDQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICAvL9C00LDQvdC90YvQtSDQutCw0YDRgtC+0YfQutC4INC4IHRlbXBsYXRlXHJcbiAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2spIHtcclxuICAgIHRoaXMuX3RleHQgPSBkYXRhLmNhcmRuYW1lO1xyXG4gICAgdGhpcy5faW1hZ2UgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBwaG90b0NhcmQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG9cIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICByZXR1cm4gcGhvdG9DYXJkO1xyXG4gIH1cclxuICAvL9C/0YDQuNGB0LLQsNC10LLQsNC10Lwg0LrQu9Cw0YHRgdGLINC30L3QsNGH0LXQvdC40Y/QvCDQutCw0YDRgtC+0YfQtdC6XHJcbiAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICAvLyDQlNC+0LHQvtCy0LvRj9C10Lwg0LTQsNC90L3Ri9C1XHJcbiAgICB0aGlzLl9waG90b0ltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9waG90b0ltYWdlLnNyYyA9IHRoaXMuX2ltYWdlO1xyXG4gICAgdGhpcy5fcGhvdG9JbWFnZS5hbHQgPSB0aGlzLl90ZXh0O1xyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvX190ZXh0XCIpLnRleHRDb250ZW50ID0gdGhpcy5fdGV4dDtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIC8vIGxpa2VcclxuICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG9fX3ZlY3RvclwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2soZXZ0KTtcclxuICAgICAgfSk7XHJcbiAgICAvLyBiaW5cclxuICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG9fX2JpblwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVCaW5DbGljayhldnQpO1xyXG4gICAgICB9KTtcclxuICAgIC8vINC+0YLQutGA0YvRgtC40LUg0LrQsNGA0YLQuNC90LrQuFxyXG4gICAgdGhpcy5fcGhvdG9JbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fdGV4dCwgdGhpcy5faW1hZ2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8vIGxpa2VcclxuICBfaGFuZGxlTGlrZUNsaWNrKGV2dCkge1xyXG4gICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKFwicGhvdG9fX3ZlY3Rvcl9hY3RpdmVcIik7XHJcbiAgfVxyXG4gIC8vYmluXHJcbiAgX2hhbmRsZUJpbkNsaWNrKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcclxuICB9XHJcbn1cclxuIiwiXHJcbmV4cG9ydCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhLCBmb3JtTGlzdCkge1xyXG4gICAgdGhpcy5fZm9ybVNlbGVjdG9yID0gZGF0YS5mb3JtU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gZGF0YS5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBkYXRhLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGRhdGEuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGRhdGEuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGRhdGEuZXJyb3JDbGFzcztcclxuICAgIC8vY29uc29sZS5sb2codGhpcy5faW5wdXRTZWxlY3RvcilcclxuICAgIHRoaXMuX2Zvcm1MaXN0ID0gZm9ybUxpc3Q7XHJcbiAgICAvL2NvbnNvbGUubG9nIChmb3JtTGlzdClcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtTGlzdC5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIC8v0L/QvtC60LDQt9GL0LLQsNC10YIg0Y3Qu9C10LzQtdC90YIg0L7RiNC40LHQutC4XHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUxpc3QucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgLy8gY29uc29sZS5sb2coZXJyb3JFbGVtZW50KVxyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgLy8g0YHQutGA0YvQstCw0LXRgiDRjdC70LXQvNC10L3RgiDQvtGI0LjQsdC60LhcclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtTGlzdC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICAvL2NvbnNvbGUubG9nKGVycm9yRWxlbWVudCk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgLy8g0L/RgNC+0LLQtdGA0LrQsCDQuNC90L/Rg9GC0L7QsiDQtNC70Y8g0LrQvdC+0L/QutC4XHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyDRhNGD0L3QutGG0LjRjyDQsdC70L7QutC40YDQvtCy0LrQuCDQutC90L7Qv9C60LhcclxuICBkaXNhYmxlU3VibWl0QnV0dG9uKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG5cclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLl9idXR0b25FbGVtZW50KVxyXG4gIH1cclxuXHJcbiAgX2VuYWJsZVN1Ym1pdEJ1dHRvbigpIHtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vINGE0YPQvdC60YbQuNGPINC/0LXRgNC10LrQu9GO0YfQtdC90LjRjyDQutC90L7Qv9C60LhcclxuXHJcbiAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgLy8g0JXRgdC70Lgg0LXRgdGC0Ywg0YXQvtGC0Y8g0LHRiyDQvtC00LjQvSDQvdC10LLQsNC70LjQtNC90YvQuSDQuNC90L/Rg9GCXHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgLy8g0YHQtNC10LvQsNC5INC60L3QvtC/0LrRgyDQvdC10LDQutGC0LjQstC90L7QuVxyXG4gICAgICB0aGlzLmRpc2FibGVTdWJtaXRCdXR0b24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vINC40L3QsNGH0LUg0YHQtNC10LvQsNC5INC60L3QvtC/0LrRgyDQsNC60YLQuNCy0L3QvtC5XHJcbiAgICAgIHRoaXMuX2VuYWJsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g0L/RgNC+0LLQtdGA0LrQsCDQvdCwINCy0LDQu9C40LTQvdC+0YHRgtGMINC/0L7Qu9C10LlcclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgLy9jb25zb2xlLmxvZyhpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpXHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g0YTRg9C90LrRhtC40Y8g0L/QtdGA0LXQsdC+0YDQsCDQstGB0LXRhSBpbnB1dHMg0YTQvtGA0LxcclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUxpc3QucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKVxyXG4gICAgKTtcclxuICAgIC8vY29uc29sZS5sb2codGhpcy5faW5wdXRMaXN0KVxyXG5cclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCB7IGluaXRpYWxDYXJkcyBhcyBpdGVtcyB9O1xyXG5jb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAge1xyXG4gICAgY2FyZG5hbWU6IFwi0JDRgNGF0YvQt1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQvYXJraHl6LmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY2FyZG5hbWU6IFwi0KfQtdC70Y/QsdC40L3RgdC60LDRjyDQvtCx0LvQsNGB0YLRjFwiLFxyXG4gICAgbGluazogXCJodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQvY2hlbHlhYmluc2stb2JsYXN0LmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY2FyZG5hbWU6IFwi0JjQstCw0L3QvtCy0L5cIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2l2YW5vdm8uanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjYXJkbmFtZTogXCLQmtCw0LzRh9Cw0YLQutCwXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9rYW1jaGF0a2EuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjYXJkbmFtZTogXCLQpdC+0LvQvNC+0LPQvtGA0YHQutC40Lkg0YDQsNC50L7QvVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQva2hvbG1vZ29yc2t5LXJheW9uLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY2FyZG5hbWU6IFwi0JHQsNC50LrQsNC7XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9iYWlrYWwuanBnXCIsXHJcbiAgfSxcclxuXTtcclxuIiwiaW1wb3J0IHsgaXRlbXMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgZGF0YSwgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3JlbmRlckl0ZW1zID0gZGF0YTtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICAgIC8vY29uc29sZS5sb2coZGF0YSlcclxuICB9XHJcblxyXG4gIC8vINC00L7QsdCw0LLQu9C10L3QvdCw0Y8g0LrQsNGA0YLQvtGH0LrQsCDQvtGC0YDQuNGB0L7QstGL0LLQsNC10YLRgdGPINCyINC90LDRh9Cw0LvQtVxyXG4gIGFkZEl0ZW0oY2FyZEVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGNhcmRFbGVtZW50KTtcclxuICB9XHJcblxyXG4gIC8vINGB0L7Qt9C00LDQvdC40LUg0LrQsNGA0YLQvtGH0LrQuCDQuCDQtdGRINGA0LXQvdC00LXRgFxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLy/RhNGD0L3QutGG0LjRjyDQvtGC0LrRgNGL0YLQuNGPINC/0L7Qvy3QsNC/0L7QslxyXG4gIG9wZW4oKSB7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXBfYWN0aXZlXCIpOyAvL9GE0YPQvdC60YbQuNGPINC00LvRjyDQvtGC0LrRgNGL0YLQuNGPINC/0L7Qvy3QsNC/0LBcclxuICB9XHJcbiAgLy/RhNGD0L3QutGG0LjRjyDQt9Cw0LrRgNGL0YLQuNGPINC/0L7Qvy3QsNC/0L7QslxyXG4gIGNsb3NlKCkge1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcInBvcHVwX2FjdGl2ZVwiKTsgLy/RhNGD0L3QutGG0LjRjyDQtNC70Y8g0LfQsNC60YDRi9GC0LjRj1xyXG4gIH1cclxuXHJcbiAgLy/Qt9Cw0LrRgNGL0YLQuNC1INC/0L7Qvy3QsNC/0LAg0L3QsCBlc2N1cFxyXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcclxuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvL9GB0LvRg9GI0LDRgtC10LvRjCDQtNC70Y8g0LfQsNC60YDRi9GC0LjRjyDQv9C+0L8t0LDQv9CwINC90LAgb3ZlcmxheSDQuCDQutGA0LXRgdGC0LjQulxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBldmVudC50YXJnZXQgPT09IHRoaXMuX3BvcHVwIHx8XHJcbiAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwX19jbG9zZVwiKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuLy/Qv9C+0L8t0L/QsNC/INGBINC60LDRgNGC0LjQvdC60L7QuVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IsIGltYWdlUGhvdG8sIGltYWdlVGV4dCB9KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2ltYWdlUGhvdG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGltYWdlUGhvdG8pO1xyXG4gICAgdGhpcy5faW1hZ2VUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpbWFnZVRleHQpO1xyXG4gIH1cclxuICAvLyDQvtGC0LrRgNGL0YLQuNC1INC/0L7Qvy3QsNC/0LBcclxuICBvcGVuKGNhcmRuYW1lLCBsaW5rKSB7XHJcbiAgICB0aGlzLl9pbWFnZVBob3RvLnNyYyA9IGxpbms7XHJcbiAgICB0aGlzLl9pbWFnZVBob3RvLmFsdCA9IGNhcmRuYW1lO1xyXG4gICAgdGhpcy5faW1hZ2VUZXh0LnRleHRDb250ZW50ID0gY2FyZG5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCB7IGhhbmRsZUZvcm1TdWJtaXQgfSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1DYXJkID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKFxyXG4gICAgdGhpcy5fcG9wdXBGb3JtQ2FyZC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2l0ZW1cIilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybUNhcmQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1DYXJkLnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IHVzZXJuYW1lLCBqb2IsIGF2YXRhciB9KSB7XHJcbiAgICB0aGlzLl91c2VybmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlcm5hbWUpO1xyXG4gICAgdGhpcy5fam9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2IpO1xyXG4gICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICBjb25zdCBpbnB1dFVzZXJJbmZvID0ge1xyXG4gICAgICB1c2VybmFtZTogdGhpcy5fdXNlcm5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIGpvYjogdGhpcy5fam9iLnRleHRDb250ZW50LFxyXG4gICAgICBhdmF0YXI6IHRoaXMuX2F2YXRhci5zcmNcclxuICAgIH07XHJcbiAgICByZXR1cm4gaW5wdXRVc2VySW5mbztcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKGlucHV0VXNlckluZm8pIHtcclxuICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IGlucHV0VXNlckluZm8uam9iLFxyXG4gICAgdGhpcy5fdXNlcm5hbWUudGV4dENvbnRlbnQgPSBpbnB1dFVzZXJJbmZvLnVzZXJuYW1lO1xyXG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IGlucHV0VXNlckluZm8uYXZhdGFyO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7IGl0ZW1zIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiXHJcblxyXG5jb25zdCBwcm9maWxlT3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAtb3BlblwiKTsgLy/QutC90L7Qv9C60LAg0L7RgtC60YDRi9GC0LjRjyDQv9C+0L8t0LDQv9CwXHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpOyAvL9CS0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0LzQtdGC0L7QtNC+0LwgcXVlcnlTZWxlY3RvcigpXHJcbi8vINCd0LDRhdC+0LTQuNC8INC/0L7Qu9GPINGE0L7RgNC80Ysg0LIgRE9NXHJcbmNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9faXRlbV90eXBlX25hbWVcIik7IC8vINCS0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0LjQvdGB0YLRgNGD0LzQtdC90YLQvtC8IC5xdWVyeVNlbGVjdG9yKClcclxuY29uc3Qgam9iSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX2l0ZW1fdHlwZV9qb2JcIik7IC8vINCS0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0LjQvdGB0YLRgNGD0LzQtdC90YLQvtC8IC5xdWVyeVNlbGVjdG9yKClcclxuXHJcbmNvbnN0IGNhcmRzUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLWNhcmRzXCIpOyAvL9C/0L7Qvy3Qv9Cw0L8g0YTQvtGA0LzRiyDRgSDQutCw0YDRgtC40L3QutCw0LzQuFxyXG5jb25zdCBjYXJkT3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLW9wZW5cIik7IC8v0LrQvdC+0L/QutCwINC+0YLQutGA0YvRgtC40Y8g0YTQvtGA0LzRiyDQv9C+0L8t0LDQv9CwINGBINC60LDRgNGC0LjQvdC60LDQvNC4XHJcblxyXG4vL2NvbnN0IGNhcmRzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fZWxlbWVudHNcIik7IC8vINGB0L/QuNGB0L7QuiDQutC+0L3RgtC10LnQvdC10YBcclxuY29uc3QgZm9ybUNhcmQgPSBjYXJkc1BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS1jYXJkXCIpOyAvL9C00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC60LDRgNGC0L7Rh9C60Lgg0LrQsNGA0YLQuNC90LrQuFxyXG5cclxuY29uc3Qgb2JqID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIuZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLmZvcm1fX2l0ZW1cIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX3NhdmVcIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19zYXZlX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcImZvcm1fX2l0ZW0tZXJyb3JfYWN0aXZlXCIsXHJcbiAgZXJyb3JDbGFzczogXCJmb3JtX19pdGVtX3R5cGVfZXJyb3JcIixcclxufTtcclxuXHJcbi8qY29uc3QgYXBpID0gbmV3IEFwaSAoe2Jhc2VVcmw6ICdodHRwczovL25vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQxJyxcclxuICBoZWFkZXJzOiB7IFxyXG4gICAgYXV0aG9yaXphdGlvbjogJ2NjZTJkYzZkLWZjZTAtNGFkYi04MGY2LThiOGZjZTMwNjc1NCcsXHJcbiAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gIH1cclxufSk7Ki9cclxuXHJcbmZldGNoKCdodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQxL3VzZXJzL21lJywge1xyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246ICdjY2UyZGM2ZC1mY2UwLTRhZGItODBmNi04YjhmY2UzMDY3NTQnXHJcbiAgfVxyXG59KVxyXG4gIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxyXG4gIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgY29uc3Qgc29tZW5hbWUgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQpXHJcbiAgICBjb25zb2xlLmxvZyhzb21lbmFtZS5uYW1lKTtcclxuICB9KTtcclxuXHJcblxyXG4vL9Cy0LDQu9C40LTQsNGG0LjRjyDRhNC+0YDQvFxyXG5jb25zdCB2YWxpZGl0eUZvcm0gPSBuZXcgRm9ybVZhbGlkYXRvcihvYmosIHByb2ZpbGVGb3JtKTtcclxuY29uc3QgdmFsaWRpdHlDYXJkID0gbmV3IEZvcm1WYWxpZGF0b3Iob2JqLCBmb3JtQ2FyZCk7XHJcblxyXG52YWxpZGl0eUZvcm0uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG52YWxpZGl0eUNhcmQuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuLy/Qv9C+0L8t0L/QsNC/INGBINC60LDRgNGC0LjQvdC60L7QuSwg0L/RgNC40YHQstC+0LXQvdC40LUg0LfQvdCw0YfQtdC90LjQuSAo0Y3RgtC+INC90LUg0LLQvtC70YjQtdCx0YHRgtCy0L4pXHJcbmNvbnN0IHBvcHVwV2l0aE9wZW5JbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZSh7XHJcbiAgcG9wdXBTZWxlY3RvcjogXCIucG9wdXAtaW1hZ2VcIixcclxuICBpbWFnZVBob3RvOiBcIi5wb3B1cF9fcGhvdG9cIixcclxuICBpbWFnZVRleHQ6IFwiLnBvcHVwX190ZXh0XCIsXHJcbn0pO1xyXG4vLyDRhNGD0L3QutGG0LjRjyDQtNC70Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L8t0L/QsNC/0LAg0LrQsNGA0YLQuNC90LrQuFxyXG5jb25zdCBoYW5kbGVDYXJkQ2xpY2sgPSAoY2FyZG5hbWUsIGxpbmspID0+IHtcclxuICBwb3B1cFdpdGhPcGVuSW1hZ2Uub3BlbihjYXJkbmFtZSwgbGluayk7XHJcbn07XHJcbnBvcHVwV2l0aE9wZW5JbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy/RgdC+0LfQtNCw0L3QuNC1INC60LDRgNGC0L7Rh9C60Lgg0Lgg0YLQtdC80L/Qu9C10LnRgtCwINC4INGE0YPQvdC60YbQuNGPINC+0YLQutGA0YvRgtC40Y8g0LrQsNGA0YLQuNC90LrQuFxyXG5jb25zdCBjcmVhdGVDYXJkID0gKGRhdGEpID0+IHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoZGF0YSwgXCIuY2FyZC10ZW1wbGF0ZVwiLCBoYW5kbGVDYXJkQ2xpY2spO1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxuICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbn07XHJcbi8vINC80LDRgdGB0LjQsiDRgSDQutCw0YDRgtC+0YfQutCw0LzQuCDQstGB0YLQsNCy0LvRj9C10Lwg0LIg0L/RgNC+0LXQutGCXHJcbmNvbnN0IHJlbmRlckNhcmQgPSBuZXcgU2VjdGlvbihcclxuICB7XHJcbiAgICBkYXRhOiBpdGVtcyxcclxuICAgIHJlbmRlcmVyOiAoZGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoZGF0YSk7XHJcbiAgICAgIHJlbmRlckNhcmQuYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgXCIuY2FyZHNfX2VsZW1lbnRzXCJcclxuKTtcclxuXHJcbnJlbmRlckNhcmQucmVuZGVySXRlbXMoKTtcclxuXHJcbi8vINC/0L7Qvy3Qv9Cw0L8g0YEg0LrQsNGA0YLQuNC90LrQvtC5XHJcbmNvbnN0IHBvcHVwV2l0aENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5wb3B1cC1jYXJkc1wiLCB7XHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGRhdGEpID0+IHtcclxuICAgIHJlbmRlckNhcmQuYWRkSXRlbShjcmVhdGVDYXJkKGRhdGEpKTtcclxuICAgIHBvcHVwV2l0aENhcmQuY2xvc2UoKTtcclxuICB9LFxyXG59KTtcclxuXHJcblxyXG4vLyDQv9C+0L8t0L/QsNC/INC/0YDQvtGE0LjQu9GMXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICB1c2VybmFtZTogXCIucHJvZmlsZV9fbmFtZVwiLFxyXG4gIGpvYjogXCIucHJvZmlsZV9fam9iXCIsXHJcbiAgYXZhdGFyOiBcIi5wcm9maWxlX19hdmF0YXJcIixcclxufSk7XHJcblxyXG5jb25zdCBwb3B1cFdpdGhQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIucG9wdXAtZm9ybVwiLCB7XHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhpbnB1dFZhbHVlcyk7XHJcbiAgICBwb3B1cFdpdGhQcm9maWxlLmNsb3NlKCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG5wb3B1cFdpdGhQcm9maWxlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbnBvcHVwV2l0aENhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8v0KHQvtGF0YDQsNC90LXQvdC40LUg0LTQsNC90L3Ri9GFINC00LvRjyDQv9C+0L8t0LDQv9CwINGE0L7RgNC80Ysg0L/RgNC+0YTQuNC70YxcclxucHJvZmlsZU9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAvL1xyXG4gIHZhbGlkaXR5Rm9ybS5kaXNhYmxlU3VibWl0QnV0dG9uKCk7XHJcblxyXG4gIGNvbnN0IHByb2ZpbGVVc2VyUG9wdXAgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIG5hbWVJbnB1dC52YWx1ZSA9IHByb2ZpbGVVc2VyUG9wdXAudXNlcm5hbWU7IC8v0LfQsNC/0LjRgdGL0LLQsNC10Lwg0LTQsNC90L3Ri9C1INCyINC40L3Qv9GD0YIg0LjQtyDQv9GA0L7RhNCw0LnQu9CwXHJcblxyXG4gIGpvYklucHV0LnZhbHVlID0gcHJvZmlsZVVzZXJQb3B1cC5qb2I7XHJcbiAgcG9wdXBXaXRoUHJvZmlsZS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy8g0L7RgtC60YDRi9GC0LjQtSDQv9C+0L8t0LDQv9CwINC00L7QsdC+0LLQu9C10L3QuNGPINC60LDRgNGC0LjQvdC60LhcclxuY2FyZE9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICB2YWxpZGl0eUNhcmQuZGlzYWJsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gIHBvcHVwV2l0aENhcmQub3BlbigpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwidGhpcyIsIl90ZXh0IiwiY2FyZG5hbWUiLCJfaW1hZ2UiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfcGhvdG9JbWFnZSIsIl9zZXRFdmVudExpc3RlbmVycyIsInNyYyIsImFsdCIsInRleHRDb250ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaGFuZGxlQmluQ2xpY2siLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW1vdmUiLCJGb3JtVmFsaWRhdG9yIiwiZm9ybUxpc3QiLCJfZm9ybVNlbGVjdG9yIiwiZm9ybVNlbGVjdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1MaXN0IiwiX2J1dHRvbkVsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJlcnJvckVsZW1lbnQiLCJpZCIsImFkZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2lucHV0TGlzdCIsInNvbWUiLCJ2YWxpZGl0eSIsInZhbGlkIiwiZGlzYWJsZWQiLCJfaGFzSW52YWxpZElucHV0IiwiZGlzYWJsZVN1Ym1pdEJ1dHRvbiIsIl9lbmFibGVTdWJtaXRCdXR0b24iLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiZm9yRWFjaCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJpbml0aWFsQ2FyZHMiLCJTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJyZW5kZXJlciIsIl9yZW5kZXJJdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJjYXJkRWxlbWVudCIsInByZXBlbmQiLCJpdGVtcyIsIml0ZW0iLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJrZXkiLCJjbG9zZSIsIl9wb3B1cCIsIl9oYW5kbGVFc2NDbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoSW1hZ2UiLCJpbWFnZVBob3RvIiwiaW1hZ2VUZXh0IiwiX2ltYWdlUGhvdG8iLCJfaW1hZ2VUZXh0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJfcG9wdXBGb3JtQ2FyZCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiaW5wdXRWYWx1ZXMiLCJpbnB1dCIsIm5hbWUiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwiX2dldElucHV0VmFsdWVzIiwicmVzZXQiLCJVc2VySW5mbyIsInVzZXJuYW1lIiwiam9iIiwiYXZhdGFyIiwiX3VzZXJuYW1lIiwiX2pvYiIsIl9hdmF0YXIiLCJpbnB1dFVzZXJJbmZvIiwicHJvZmlsZU9wZW5CdXR0b24iLCJwcm9maWxlRm9ybSIsIm5hbWVJbnB1dCIsImpvYklucHV0IiwiY2FyZHNQb3B1cCIsImNhcmRPcGVuQnV0dG9uIiwiZm9ybUNhcmQiLCJvYmoiLCJmZXRjaCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwidGhlbiIsInJlcyIsImpzb24iLCJyZXN1bHQiLCJzb21lbmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwibG9nIiwidmFsaWRpdHlGb3JtIiwidmFsaWRpdHlDYXJkIiwiZW5hYmxlVmFsaWRhdGlvbiIsInBvcHVwV2l0aE9wZW5JbWFnZSIsIm9wZW4iLCJzZXRFdmVudExpc3RlbmVycyIsImNyZWF0ZUNhcmQiLCJnZW5lcmF0ZUNhcmQiLCJyZW5kZXJDYXJkIiwiYWRkSXRlbSIsInJlbmRlckl0ZW1zIiwicG9wdXBXaXRoQ2FyZCIsInVzZXJJbmZvIiwicG9wdXBXaXRoUHJvZmlsZSIsInNldFVzZXJJbmZvIiwicHJvZmlsZVVzZXJQb3B1cCIsImdldFVzZXJJbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==